import static net.modificationstation.stationapi.gradle.SubprojectHelpers.addDependencyXML

plugins {
    id 'maven-publish'
    id 'fabric-loom' version '1.11.7'
    id 'babric-loom-extension' version '1.10.2'
    id "com.modrinth.minotaur" version "2.+"
}

allprojects {
    apply plugin: "maven-publish"
    apply plugin: "fabric-loom"
    apply plugin: "babric-loom-extension"

    java.sourceCompatibility = JavaVersion.VERSION_17
    java.targetCompatibility = JavaVersion.VERSION_17

    babric {
        disablePomOverride.set(true)
    }
    
    loom {
        mixin {
            useLegacyMixinAp = false
        }
    }
    
    repositories {
        // Used for Babric Loom Extensions
        maven {
            name = 'Babric'
            url = 'https://maven.glass-launcher.net/babric'
        }

        // Used for many dependencies
        maven {
            name = 'Glass Releases'
            url = 'https://maven.glass-launcher.net/releases'
        }

        // Used for Snapshots
        maven {
            name = 'Glass Snapshots'
            url = 'https://maven.glass-launcher.net/snapshots'
        }

        // NyaRepo
        maven {
            name = "nyarepo"
            url = "https://maven.fildand.cz/releases"
        }

        // Used for a StationAPI dependency.
        maven {
            name = 'Froge'
            url 'https://maven.minecraftforge.net/'
        }

        // Used for projects that do not have a maven repository, but do have a GitHub repository with working build scripts.
        maven {
            name = 'Jitpack'
            url = 'https://jitpack.io'
        }

        // Modrinth Maven
        exclusiveContent {
            forRepository {
                maven {
                    name = "Modrinth"
                    url = "https://api.modrinth.com/maven"
                }
            }
            filter {
                includeGroup "maven.modrinth"
            }
        }

        mavenCentral()
    }

    configurations {
        transitiveImplementation
        implementation.extendsFrom configurations.transitiveImplementation
    }

    dependencies {
        minecraft "com.mojang:minecraft:${project.minecraft_version}"
        mappings "net.glasslauncher:biny:${project.yarn_mappings}:v2"
        modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

        implementation "org.slf4j:slf4j-api:1.8.0-beta4"
        implementation "org.apache.logging.log4j:log4j-slf4j18-impl:2.17.2"
        implementation "me.carleslc:Simple-Yaml:1.8.4"

        modImplementation ("net.modificationstation:StationAPI:${project.stapi_version}") {
            exclude group: "babric", module: "fabric-loader"
        }

        modImplementation("net.glasslauncher.mods:ModMenu:${project.modmenu_version}") {
            transitive false
        }

        modImplementation("net.glasslauncher.mods:glass-networking:${project.glass_networking_version}") {
            transitive false
        }

        modImplementation("net.glasslauncher.mods:GlassConfigAPI:${project.gcapi_version}") {
            transitive false
        }

        modImplementation("net.glasslauncher.mods:AlwaysMoreItems:${project.alwaysmoreitems_version}") {
            transitive false
        }

        modImplementation("maven.modrinth:retrocommands:${project.retrocommands_version}-b1.7.3") {
            transitive false
        }

        modImplementation("net.danygames2014:spawneggs:${project.spawneggs_version}") {
            transitive false
        }

        modImplementation("maven.modrinth:bh-creative:${project.bhcreative_version}-b1.7.3") {
            transitive false
        }
        
        modImplementation("net.danygames2014:WhatsThis:${project.whatsthis_version}") {
            transitive false
        }

        modRuntimeOnly("maven.modrinth:retroauth:${project.retroauth_version}-b1.7.3") {
            transitive false
        }

        modRuntimeOnly("maven.modrinth:unitweaks:${project.unitweaks_version}-b1.7.3") {
            transitive false
        }

        modRuntimeOnly("maven.modrinth:fast-stapi-intro:2.0.0-b1.7.3") {
            transitive false
        }
    }

    sourceSets {
        test {
            compileClasspath += sourceSets.main.compileClasspath + sourceSets.main.output
            runtimeClasspath += sourceSets.main.runtimeClasspath + sourceSets.main.output
        }
    }

    tasks.named("processResources", ProcessResources) {
        def ver = project.properties["mod_version"]

        if (project.properties["override_version"] != null) {
            ver = "${project.properties['mod_version']}+${project.properties['override_version']}"
        }

        inputs.property("version", ver)

        filesMatching("fabric.mod.json") {
            expand(version: ver)
        }
    }

    java {
        withSourcesJar()
    }

    tasks.named("jar", Jar) {
        from("LICENSE") {
            rename { "${it}_${project.properties['archivesBaseName']}" }
        }
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.release = 17
        it.options.encoding = "UTF-8"
    }

    tasks.named('compileJava', JavaCompile) {
        options.compilerArgs.add('-XDignore.symbol.file')
        options.fork = true
        options.forkOptions.executable = System.getProperty('java.home') + '/bin/javac' + (System.getProperty('os.name').startsWith('Windows') ? '.exe' : '')
    }

    // Maven Publishing
    publishing {
        repositories {
            mavenLocal()

            // Glass Maven
            if (project.publish_to_glass_maven.equalsIgnoreCase("true")) {
                if (project.hasProperty("calmilamsy_secret_publishing_cave_username")) {
                    maven {
                        url = "https://maven.glass-launcher.net/releases"
                        credentials {
                            username "${project.calmilamsy_secret_publishing_cave_username}"
                            password "${project.calmilamsy_secret_publishing_cave_password}"
                        }
                    }
                }
            }

            // NyaRepo
            if (project.hasProperty("nyarepo_publishing_cave_username")) {
                maven {
                    url = "https://maven.fildand.cz/releases"
                    credentials {
                        username "${project.nyarepo_publishing_cave_username}"
                        password "${project.nyarepo_publishing_cave_password}"
                    }
                }
            }
        }

        publications {
            mavenJava(MavenPublication) {
                artifactId = project.archivesBaseName
                from components.java
            }
        }
    }

    tasks.withType(GenerateModuleMetadata).tap {
        configureEach {
            enabled = false
        }
    }
}

group = project.properties['maven_group']
base.archivesName.set(project.archives_base_name)
version = project.hasProperty('override_version') ? project.properties['override_version'].substring(0, 7) : project.properties['mod_version']

subprojects {
    group = rootProject.hasProperty('override_version') ?
            project.properties['maven_group'] + ".NyaLib." + project.properties['override_version'].substring(0, 7) :
            project.properties['maven_group'] + ".NyaLib.submodule"

    configurations {
        out {
            canBeConsumed = true
            canBeResolved = false
        }
        dev {
            canBeConsumed = true
            canBeResolved = false
        }
        test {
            canBeConsumed = true
            canBeResolved = false
        }
    }

    tasks.register('testJar', Jar) {
        from sourceSets.test.output
        archiveClassifier.convention('test')
        archiveClassifier.set('test')
    }

    artifacts {
        add("out", tasks.getByName("remapJar"))
        add("dev", tasks.getByName("jar"))
        add("test", tasks.getByName("testJar"))
    }

    rootProject.dependencies {
        implementation project(path: ":$name", configuration: "dev")
        testImplementation project(path: ":$name", configuration: "test")
        include project(path: ":$name", configuration: "out")
    }

    publishing {
        publications {
            mavenJava {
                pom.withXml { XmlProvider xml ->
                    println("Wiping the POM file dependencies for submodule " + this.rootProject)
                    Node dependenciesNode = net.fabricmc.loom.util.GroovyXmlUtil.getOrCreateNode(xml.asNode(), "dependencies")
                    if (dependenciesNode) {
                        xml.asNode().remove(dependenciesNode)
                    }
                }
            }
        }
    }
}

tasks.named('compileJava', JavaCompile) {
    options.compilerArgs.add('-XDignore.symbol.file')
    options.fork = true
    options.forkOptions.executable = System.getProperty('java.home') + '/bin/javac' + (System.getProperty('os.name').startsWith('Windows') ? '.exe' : '')
}

publishing {
    publications {
        mavenJava {
            artifactId = project.properties['archives_base_name']

            pom.withXml { XmlProvider xml ->
                println("Wiping the POM file dependencies")
                Node dependenciesNode = net.fabricmc.loom.util.GroovyXmlUtil.getOrCreateNode(xml.asNode(), "dependencies")
                if (dependenciesNode) {
                    xml.asNode().remove(dependenciesNode)
                }
                
                project.subprojects.each { subproject ->
                    println("Adding subproject as a dependency: ${subproject.name}")
                    
                    addDependencyXML(xml.asNode(), "compile", subproject)
                }
            }
        }
    }
}

babric {
    disablePomOverride.set(true)
}

loom {
    runs {
        register('runTestmodClient') {
            source 'test'
            client()
        }
        register('runTestmodServer') {
            source 'test'
            server()
        }
    }
}

tasks.register('testJar', Jar) {
    from sourceSets.test.output
    archiveClassifier.convention('test')
    archiveClassifier.set('test')
}

tasks.withType(GenerateModuleMetadata).configureEach {
    enabled = false
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 17
}

// Modrinth Publishing
modrinth {
    if (project.hasProperty("modrinth_publishing_cave")) {
        token = project.modrinth_publishing_cave
        projectId = project.modrinth_slug
        versionNumber = project.mod_version
        versionName = "${project.modrinth_version_name} ${project.mod_version}"
        changelog = rootProject.file("CHANGELOG.md").text
        versionType = "release"
        uploadFile = remapJar
        gameVersions = ["b1.7.3"]
        loaders = ["fabric", "babric"]
        dependencies {
            required.project "stationapi"
            required.project "glass-config-api"
        }
    }
}

tasks.register("update") {
    doLast {
        def propsFile = file("gradle.properties")

        List<String> lines = propsFile.readLines()

        updateDependency(lines, "BINY", "yarn_mappings", "https://maven.glass-launcher.net/releases/net/glasslauncher/biny")
        updateDependency(lines, "Fabric Loader", "loader_version", "https://maven.fabricmc.net/net/fabricmc/fabric-loader/")
        updateDependency(lines, "StationAPI", "stapi_version", "https://maven.glass-launcher.net/releases/net/modificationstation/StationAPI")
        updateDependency(lines, "Glass Networking", "glass_networking_version", "https://maven.glass-launcher.net/releases/net/glasslauncher/mods/glass-networking")
        updateDependency(lines, "Glass Config API", "gcapi_version", "https://maven.glass-launcher.net/releases/net/glasslauncher/mods/GlassConfigAPI")
        updateDependency(lines, "Always More Items", "alwaysmoreitems_version", "https://maven.glass-launcher.net/releases/net/glasslauncher/mods/AlwaysMoreItems")
        updateDependency(lines, "ModMenu", "modmenu_version", "https://maven.glass-launcher.net/releases/net/glasslauncher/mods/ModMenu")
        updateDependency(lines, "BH Creative", "bhcreative_version", "https://api.modrinth.com/maven/maven/modrinth/bh-creative")
        updateDependency(lines, "Spawn Eggs", "spawneggs_version", "https://maven.glass-launcher.net/releases/net/danygames2014/spawneggs")
        updateDependency(lines, "Retro Commands", "retrocommands_version", "https://api.modrinth.com/maven/maven/modrinth/retrocommands")
        updateDependency(lines, "RetroAuth", "retroauth_version", "https://api.modrinth.com/maven/maven/modrinth/retroauth")
        updateDependency(lines, "UniTweaks", "unitweaks_version", "https://api.modrinth.com/maven/maven/modrinth/unitweaks")

        propsFile.text = lines.join(System.lineSeparator())
        println("Finished updating dependencies, please reload your Gradle Project")
    }
}

def updateDependency(List<String> lines, String name, String property, String artifactUrl) {
    println("Updating Dependency " + name)

    if (!project.hasProperty(property)) {
        println("Project does not have property " + property)
    }

    String latestVersion = fetchLatestVersion(artifactUrl)

    if (latestVersion == null) {
        println("Error while fetching latest version")
    }

    for (int i = 0; i < lines.size(); i++) {
        if (lines[i].contains(property)) {
            lines[i] = lines[i].split("=")[0] + "=" + latestVersion
            break
        }
    }

    println("Dependency " + name + " updated to " + latestVersion)
}

static def fetchLatestVersion(String artifactUrl) {
    String latestVersion = null

    try {
        String artifactMeta = new URL(artifactUrl + "/maven-metadata.xml").text
        latestVersion = artifactMeta.split("<latest>")[1].split("</latest>")[0]
    } catch (Exception e) {
        println("Error while updating dependency " + artifactUrl)
        println(e.message)
        return null
    }

    return latestVersion;
}
